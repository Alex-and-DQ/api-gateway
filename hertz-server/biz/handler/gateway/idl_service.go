// Code generated by hertz generator.

package gateway

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	manager "github.com/huangwei021230/api-gateway/hertz-server/biz/handler/idl"
	gateway "github.com/huangwei021230/api-gateway/hertz-server/biz/model/gateway"
)

// SearchForService .
// @router /search-for-service [POST]
func SearchForService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.ServiceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(gateway.Service)
	resp, _ = manager.GetService(req.ServiceName)

	c.JSON(consts.StatusOK, resp)
}

// AddService .
// @router /add-service [POST]
func AddService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.Service
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(gateway.SuccessResp)
	manager.AddService(req)

	resp = &gateway.SuccessResp{
		Success: true,
		Msg:     req.Name,
	}
	c.JSON(consts.StatusOK, resp)
}

// DelService .
// @router /delete-service [POST]
func DelService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.ServiceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(gateway.SuccessResp)
	manager.DelService(req.ServiceName)

	resp = &gateway.SuccessResp{
		Success: true,
		Msg:     "Delete " + req.ServiceName,
	}
	c.JSON(consts.StatusOK, resp)
}

// EditService .
// @router /edit-service [POST]
func EditService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.Service
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(gateway.SuccessResp)
	manager.EditService(req)

	resp = &gateway.SuccessResp{
		Success: true,
		Msg:     "Update " + req.Name + " success",
	}
	c.JSON(consts.StatusOK, resp)
}

// ListAllService .
// @router /list-all-service [POST]
func ListAllService(ctx context.Context, c *app.RequestContext) {
	var _ error

	resp := new([]*gateway.Service)
	services := manager.ListAllService()
	resp = &services

	c.JSON(consts.StatusOK, resp)
}
