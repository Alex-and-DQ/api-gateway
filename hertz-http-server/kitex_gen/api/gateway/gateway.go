// Code generated by Kitex v0.6.1. DO NOT EDIT.

package gateway

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "github.com/huangwei021230/api-gateway/hertz-http-server/kitex_gen/api"
)

func serviceInfo() *kitex.ServiceInfo {
	return gatewayServiceInfo
}

var gatewayServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Gateway"
	handlerType := (*api.Gateway)(nil)
	methods := map[string]kitex.MethodInfo{
		"addNumbers":      kitex.NewMethodInfo(addNumbersHandler, newGatewayAddNumbersArgs, newGatewayAddNumbersResult, false),
		"multiplyNumbers": kitex.NewMethodInfo(multiplyNumbersHandler, newGatewayMultiplyNumbersArgs, newGatewayMultiplyNumbersResult, false),
		"divideNumbers":   kitex.NewMethodInfo(divideNumbersHandler, newGatewayDivideNumbersArgs, newGatewayDivideNumbersResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func addNumbersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.GatewayAddNumbersArgs)
	realResult := result.(*api.GatewayAddNumbersResult)
	success, err := handler.(api.Gateway).AddNumbers(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGatewayAddNumbersArgs() interface{} {
	return api.NewGatewayAddNumbersArgs()
}

func newGatewayAddNumbersResult() interface{} {
	return api.NewGatewayAddNumbersResult()
}

func multiplyNumbersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.GatewayMultiplyNumbersArgs)
	realResult := result.(*api.GatewayMultiplyNumbersResult)
	success, err := handler.(api.Gateway).MultiplyNumbers(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGatewayMultiplyNumbersArgs() interface{} {
	return api.NewGatewayMultiplyNumbersArgs()
}

func newGatewayMultiplyNumbersResult() interface{} {
	return api.NewGatewayMultiplyNumbersResult()
}

func divideNumbersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.GatewayDivideNumbersArgs)
	realResult := result.(*api.GatewayDivideNumbersResult)
	success, err := handler.(api.Gateway).DivideNumbers(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGatewayDivideNumbersArgs() interface{} {
	return api.NewGatewayDivideNumbersArgs()
}

func newGatewayDivideNumbersResult() interface{} {
	return api.NewGatewayDivideNumbersResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddNumbers(ctx context.Context, req *api.AdditionRequest) (r *api.AdditionResponse, err error) {
	var _args api.GatewayAddNumbersArgs
	_args.Req = req
	var _result api.GatewayAddNumbersResult
	if err = p.c.Call(ctx, "addNumbers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MultiplyNumbers(ctx context.Context, req *api.MultiplicationRequest) (r *api.MultiplicationResponse, err error) {
	var _args api.GatewayMultiplyNumbersArgs
	_args.Req = req
	var _result api.GatewayMultiplyNumbersResult
	if err = p.c.Call(ctx, "multiplyNumbers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DivideNumbers(ctx context.Context, req *api.DivisionRequest) (r *api.DivisionResponse, err error) {
	var _args api.GatewayDivideNumbersArgs
	_args.Req = req
	var _result api.GatewayDivideNumbersResult
	if err = p.c.Call(ctx, "divideNumbers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
